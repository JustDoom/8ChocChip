name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y cmake libsfml-dev libudev-dev libopenal-dev libvorbis-dev libflac-dev libxrandr-dev libxcursor-dev

      - name: Configure and build
        run: |
          mkdir build && cd build
          cmake ..
          cmake --build .

      - name: Upload executable
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-executable
          path: build/src/8ChocChip

  # build-windows:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       arch: [x64, x86]  # Target architectures for Windows EXE

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install dependencies (SFML, build tools)
  #       run: |
  #         sudo apt-get update && sudo apt-get install -y \
  #           build-essential \
  #           cmake \
  #           gcc-multilib \
  #           g++-multilib \
  #           libtool \
  #           pkg-config \
  #           libsfml-dev \
  #           libudev-dev \
  #           libopenal-dev \
  #           libvorbis-dev \
  #           libflac-dev \
  #           libxrandr-dev \
  #           libxcursor-dev

  #     - name: Configure build environment for target architecture
  #       run: |
  #         export TARGET_ARCH=${{ matrix.arch }}
  #         case $TARGET_ARCH in
  #           x64)
  #             # Set compiler and linker for 64-bit Windows target
  #             export TOOLCHAIN=$(command -v x86_64-w64-mingw32-g++-posix)
  #             ;;
  #           x86)
  #             # Set compiler and linker for 32-bit Windows target
  #             export TOOLCHAIN=$(command -v i686-w64-mingw32-g++-posix)
  #             ;;
  #           *)
  #             echo "Unsupported architecture: $TARGET_ARCH"
  #             exit 1
  #             ;;
  #         esac
  #         echo "Using compiler: $TOOLCHAIN"

  #     - name: Create build directory
  #       run: mkdir build

  #     - name: Configure CMake (cross-compiling)
  #       env:
  #         CMAKE_C_COMPILER: $TOOLCHAIN
  #         CMAKE_CXX_COMPILER: $TOOLCHAIN
  #       working-directory: build
  #       run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DSFML_DIR=/usr/lib/x86_64-linux-gnu/pkgconfig/SFML.pc # (or adjust for your SFML installation path)

  #     - name: Build
  #       working-directory: build
  #       run: cmake --build . --config Release
  
  #     - name: Archive Windows EXEs (recursive)
  #       if: success()  # Only run if previous steps succeed
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: windows-exe  # Generic name (you can customize)
  #         path: build/**/*.exe  # Capture all .exe files recursively



  # build-macos:
  #   runs-on: macos-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install dependencies
  #       run: brew update && brew install cmake sfml

  #     - name: Configure and build
  #       run: |
  #         mkdir build && cd build
  #         cmake ..
  #         cmake --build .

  #     - name: Upload executable
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: macos-executable
  #         path: build/src/8ChocChip
