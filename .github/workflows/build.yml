name: Build

on:
  push:
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'assets/**'
      - 'dependencies/**'
      - '.github/workflows/**'
    branches:
      - master
      - sdl
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [ Release ]
        c_compiler: [ gcc ]
        cpp_compiler: [ g++ ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y cmake libsfml-dev libudev-dev libopenal-dev libvorbis-dev libflac-dev libxrandr-dev libxcursor-dev libgtk-3-dev

      - name: Setup SSH key and Install submodules
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git submodule update --init --recursive

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release

      - name: Build CMake
        run: |
          cd build
          cmake --build . --config Release -j $(nproc)

      - name: Collect executable and assets
        run: |
          mkdir -p output
          ls build
          ls build/bin

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-linux
          path: build/bin/

  build-windows:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        c_compiler: [gcc]
        cpp_compiler: [g++]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$env:SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install MinGW
        run: |
          choco install mingw --version=8.1.0 -y
          echo "C:/ProgramData/chocolatey/bin" >> $GITHUB_PATH
  
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  
      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -D CMAKE_SYSTEM_VERSION=10.0.26100.0 -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
  
      - name: Build CMake
        run: |
          cd build
          cmake --build . --config Release -j ${{ env.NUMBER_OF_PROCESSORS }}

      - name: Search for .dll and .lib files
        run: |
          echo "Searching for .dll and .lib files..."
          Get-ChildItem -Path . -Recurse -Include *.dll,*.lib | ForEach-Object { $_.FullName } | Out-File -FilePath found_files.txt

      - name: Output Results
        if: success()
        run: |
          echo "Found the following .dll and .lib files:"
          cat found_files.txt
  
      - name: Collect executable and assets
        run: |
          mkdir -p output
          dir build
          dir build/bin
          dir build/bin/Release
    
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-windows
          path: build/bin/Release
  
      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}