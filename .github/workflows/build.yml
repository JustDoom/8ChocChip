name: CMake on multiple platforms

on:
  push:
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'assets/**'
      - 'dependencies/**'
      - '.github/workflows/**'
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      
      matrix:
        os: [ubuntu-latest, windows-2025]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-2025
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install build-essential git make \
        pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
        libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
        libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \
        libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
        libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev \
        libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev

    - name: Install MinGW
      if: runner.os == 'Windows'
      run: |
        choco install mingw -y

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        ${{ runner.os == 'Windows' && '-G "MinGW Makefiles"' || '' }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j ${{ runner.os == 'Windows' && env.NUMBER_OF_PROCESSORS || '$(nproc)' }}
      
    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/bin
